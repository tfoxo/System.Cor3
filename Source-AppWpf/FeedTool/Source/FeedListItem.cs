using System;
using System.Data;
using System.Linq;

namespace FeedTool
{

	// Generated by a tool : 11/11/2013 08:42:47.152 AM
	// ------------------------
	public class FeedListItem
	{
		internal string SortName { get { return string.Concat(groupid,".",title); } }
		#region Queries
		/// <summary> not that we need it or anything </summary>
		internal const string Insert_FeedListItem = @"INSERT INTO [FeedListItem] (
	[udt],
	[ddt],
	[content],
	[groupid],
	[title],
	[alt],
	[note],
	[url])
VALUES(
	@udt,
	@ddt,
	@content,
	@groupid,
	@title,
	@alt,
	@note,
	@url);";
		/// <summary> not that we need it or anything </summary>
		internal const string Update_FeedListItem = @"UPDATE [FeedListItem] SET 
		[udt] = @udt,
		[ddt] = @ddt,
		[content] = @content,
		[groupid] = @groupid,
		[title] = @title,
		[alt] = @alt,
		[note] = @note,
		[url] = @url
WHERE [id] = @xid;";
		/// <summary> not that we need it or anything </summary>
		internal const string Select_FeedListItem = @"Select * From FeedListItem;";
		#endregion
		#region Properties
		public int? id { get;set; }
		public DateTime? udt { get;set; }
		public DateTime? ddt { get;set; }
		public string content { get;set; }
		public string groupid { get;set; }
		public string title { get;set; }
		public string alt { get;set; }
		public string note { get;set; }
		public string url { get;set; }
		#endregion
		#region Constructors

		public FeedListItem(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as int?;
			if (row["udt"]!=DBNull.Value) this.udt = row["udt"] as DateTime?;
			if (row["ddt"]!=DBNull.Value) this.ddt = row["ddt"] as DateTime?;
			if (row["content"]!=DBNull.Value) this.content = row["content"] as string;
			if (row["groupid"]!=DBNull.Value) this.groupid = row["groupid"] as string;
			if (row["title"]!=DBNull.Value) this.title = row["title"] as string;
			if (row["alt"]!=DBNull.Value) this.alt = row["alt"] as string;
			if (row["note"]!=DBNull.Value) this.note = row["note"] as string;
			if (row["url"]!=DBNull.Value) this.url = row["url"] as string;
		}

		public FeedListItem(){}
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public FeedListItem(FeedListItem value)
		{
			this.id = value.id;
			this.udt = value.udt;
			this.ddt = value.ddt;
			this.content = value.content;
			this.groupid = value.groupid;
			this.title = value.title;
			this.alt = value.alt;
			this.note = value.note;
			this.url = value.url;
		}
		#region NONONO
		#if NONONO
		
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public FeedListItem(FeedListItem value)
		{
			this.id = value.id;
			this.SetFields(value);
		}
		#endif
		#endregion
		#endregion
		#region Utils

		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public void SetFields(FeedListItem value)
		{
			this.udt = value.udt;
			this.ddt = value.ddt;
			this.content = value.content;
			this.groupid = value.groupid;
			this.title = value.title;
			this.alt = value.alt;
			this.note = value.note;
			this.url = value.url;
		}

		#if NO
		// TODO: add if (usePrimary) to the primary key
		// an insert statement would not use or contain
		// a primary key value (or would contain a null,
		// hence we provide the oppertunity to neglect
		// it here.
		public SqlCommand Parameterize(SqlCommand cmd, bool usePrimary)
		{
			if (usePrimary) cmd.Parameters.AddWithValue("@xid", this.id);
			cmd.Parameters.AddWithValue("@udt", this.udt);
			cmd.Parameters.AddWithValue("@ddt", this.ddt);
			cmd.Parameters.AddWithValue("@content", this.content);
			cmd.Parameters.AddWithValue("@groupid", this.groupid);
			cmd.Parameters.AddWithValue("@title", this.title);
			cmd.Parameters.AddWithValue("@alt", this.alt);
			cmd.Parameters.AddWithValue("@note", this.note);
			cmd.Parameters.AddWithValue("@url", this.url);
			return cmd;
		}
		#endif
		#endregion
		
	}


}