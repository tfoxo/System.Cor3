/* oio * 5/29/2014 * Time: 5:55 AM
*/
using System;
using System.Collections.Generic;
using System.Cor3.Data.Engine;
using System.Data;
using System.Data.SQLite;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
namespace crudbook
{
	// based on modern-ui CommandBase?
	

	// Generated by a tool : 05/30/2014 03:14:34.118 AM
	// ------------------------
	public partial class BookMine
	{
		#region BookMine Loader
		const string booksTable = "BookMine";
		const string bookLinkTable = "BookMine";
		
		DataSet localdata = null;
		
		public DataSet GetAllData()
		{
			using (var query = (SQLiteQuery) SQLiteDataPath)
				return (localdata = query.ExecuteSelect("select * from BookMine", booksTable));
		}
		#endregion
		
		static public implicit operator BookMine(DataRowView row) { return BookMine.FromRowView(row); }
		
		// a custom variable
		public string SQLiteDataPath
		{
			get;
			internal set;
		}
		
		static public string StringForBookMine(string input, BookMine m)
		{
			return input
				.Replace("{id}", string.Format("{0}",m.id))
				.Replace("{pid}", string.Format("{0}",m.pid))
				.Replace("{category}", string.Format("{0}",m.category))
				.Replace("{tags}", string.Format("{0}",m.tags))
				.Replace("{publishdate}", string.Format("{0}",m.publishdate))
				.Replace("{title}", string.Format("{0}",m.title))
				.Replace("{author}", string.Format("{0}",m.author))
				.Replace("{publisher}", string.Format("{0}",m.publisher))
				.Replace("{uri}", string.Format("{0}",m.uri))
				.Replace("{thumb}", string.Format("{0}",m.thumb))
				.Replace("{note}", string.Format("{0}",m.note));
		}
		
		static public string StringForBookMine(string input, DataRowView row)
		{
			return input
				.Replace("{id}", string.Format("{0}",row["id"]))
				.Replace("{pid}", string.Format("{0}",row["pid"]))
				.Replace("{category}", string.Format("{0}",row["category"]))
				.Replace("{tags}", string.Format("{0}",row["tags"]))
				.Replace("{publishdate}", string.Format("{0}",row["publishdate"]))
				.Replace("{title}", string.Format("{0}",row["title"]))
				.Replace("{author}", string.Format("{0}",row["author"]))
				.Replace("{publisher}", string.Format("{0}",row["publisher"]))
				.Replace("{uri}", string.Format("{0}",row["uri"]))
				.Replace("{thumb}", string.Format("{0}",row["thumb"]))
				.Replace("{note}", string.Format("{0}",row["note"]));
		}
		
		#region Queries
		/// <summary> not that we need it or anything </summary>
		internal const string Insert_BookMine = @"INSERT INTO [BookMine] (
	[pid],
	[category],
	[tags],
	[publishdate],
	[title],
	[author],
	[publisher],
	[uri],
	[thumb],
	[note])
VALUES(
	@pid,
	@category,
	@tags,
	@publishdate,
	@title,
	@author,
	@publisher,
	@uri,
	@thumb,
	@note);";
		/// <summary> not that we need it or anything </summary>
		internal const string Update_BookMine = @"UPDATE [BookMine] SET 
		[pid] = @pid,
		[category] = @category,
		[tags] = @tags,
		[publishdate] = @publishdate,
		[title] = @title,
		[author] = @author,
		[publisher] = @publisher,
		[uri] = @uri,
		[thumb] = @thumb,
		[note] = @note
WHERE [id] = @xid;";
		/// <summary> not that we need it or anything </summary>
		internal const string Select_BookMine = @"Select * From BookMine;";
		#endregion
		#region Properties
		public long? id { get;set; }
		public long? pid { get;set; }
		public string category { get;set; }
		public string tags { get;set; }
		public DateTime? publishdate { get;set; }
		public string title { get;set; }
		public string author { get;set; }
		public string publisher { get;set; }
		public string uri { get;set; }
		public string thumb { get;set; }
		public string note { get;set; }
		#endregion
		#region Constructors

		public BookMine(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["pid"]!=DBNull.Value) this.pid = row["pid"] as long?;
			if (row["category"]!=DBNull.Value) this.category = row["category"] as string;
			if (row["tags"]!=DBNull.Value) this.tags = row["tags"] as string;
			if (row["publishdate"]!=DBNull.Value) this.publishdate = row["publishdate"] as DateTime?;
			if (row["title"]!=DBNull.Value) this.title = row["title"] as string;
			if (row["author"]!=DBNull.Value) this.author = row["author"] as string;
			if (row["publisher"]!=DBNull.Value) this.publisher = row["publisher"] as string;
			if (row["uri"]!=DBNull.Value) this.uri = row["uri"] as string;
			if (row["thumb"]!=DBNull.Value) this.thumb = row["thumb"] as string;
			if (row["note"]!=DBNull.Value) this.note = row["note"] as string;
		}
		public DataRowView ToRow(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["pid"]!=DBNull.Value) this.pid = row["pid"] as long?;
			if (row["category"]!=DBNull.Value) this.category = row["category"] as string;
			if (row["tags"]!=DBNull.Value) this.tags = row["tags"] as string;
			if (row["publishdate"]!=DBNull.Value) this.publishdate = row["publishdate"] as DateTime?;
			if (row["title"]!=DBNull.Value) this.title = row["title"] as string;
			if (row["author"]!=DBNull.Value) this.author = row["author"] as string;
			if (row["publisher"]!=DBNull.Value) this.publisher = row["publisher"] as string;
			if (row["uri"]!=DBNull.Value) this.uri = row["uri"] as string;
			if (row["thumb"]!=DBNull.Value) this.thumb = row["thumb"] as string;
			if (row["note"]!=DBNull.Value) this.note = row["note"] as string;
			return row;
		}

		public BookMine(){}
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public BookMine(BookMine value)
		{
			this.id = value.id;
			this.pid = value.pid;
			this.category = value.category;
			this.tags = value.tags;
			this.publishdate = value.publishdate;
			this.title = value.title;
			this.author = value.author;
			this.publisher = value.publisher;
			this.uri = value.uri;
			this.thumb = value.thumb;
			this.note = value.note;
		}
		#region NONONO
		#if NONONO
		
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public BookMine(BookMine value)
		{
			this.id = value.id;
			this.SetFields(value);
		}
		#endif
		#endregion
		#endregion
		#region Utils

		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public void SetFields(BookMine value)
		{
			this.pid = value.pid;
			this.category = value.category;
			this.tags = value.tags;
			this.publishdate = value.publishdate;
			this.title = value.title;
			this.author = value.author;
			this.publisher = value.publisher;
			this.uri = value.uri;
			this.thumb = value.thumb;
			this.note = value.note;
		}

		// TODO: add if (usePrimary) to the primary key
		// an insert statement would not use or contain
		// a primary key value (or would contain a null,
		// hence we provide the oppertunity to neglect
		// it here.
		public SQLiteCommand Parameterize(SQLiteCommand cmd, bool usePrimary)
		{
			if (usePrimary) cmd.Parameters.AddWithValue("@xid", this.id);
			cmd.Parameters.AddWithValue("@pid", this.pid);
			cmd.Parameters.AddWithValue("@category", this.category);
			cmd.Parameters.AddWithValue("@tags", this.tags);
			cmd.Parameters.AddWithValue("@publishdate", this.publishdate);
			cmd.Parameters.AddWithValue("@title", this.title);
			cmd.Parameters.AddWithValue("@author", this.author);
			cmd.Parameters.AddWithValue("@publisher", this.publisher);
			cmd.Parameters.AddWithValue("@uri", this.uri);
			cmd.Parameters.AddWithValue("@thumb", this.thumb);
			cmd.Parameters.AddWithValue("@note", this.note);
			return cmd;
		}
		#endregion
		#region template['?']['newTable']

		static public void SetupTable(DataTable table)
		{
			table.Columns.Add("id",typeof(Int64));
			table.Columns.Add("pid",typeof(Int64));
			table.Columns.Add("category",typeof(String));
			table.Columns.Add("tags",typeof(String));
			table.Columns.Add("publishdate",typeof(DateTime));
			table.Columns.Add("title",typeof(String));
			table.Columns.Add("author",typeof(String));
			table.Columns.Add("publisher",typeof(String));
			table.Columns.Add("uri",typeof(String));
			table.Columns.Add("thumb",typeof(String));
			table.Columns.Add("note",typeof(String));
			table.PrimaryKey = new DataColumn[]{ table.Columns["id"] };
		}

		#endregion
		#region template['prime.struct']['struct rowfrom']

		static public BookMine FromRowView(DataRowView row)
		{
			BookMine model = new BookMine();
			if (row["id"]!=DBNull.Value) model.id = row["id"] as long?;
			if (row["pid"]!=DBNull.Value) model.pid = row["pid"] as long?;
			if (row["category"]!=DBNull.Value) model.category = row["category"] as string;
			if (row["tags"]!=DBNull.Value) model.tags = row["tags"] as string;
			if (row["publishdate"]!=DBNull.Value) model.publishdate = row["publishdate"] as DateTime?;
			if (row["title"]!=DBNull.Value) model.title = row["title"] as string;
			if (row["author"]!=DBNull.Value) model.author = row["author"] as string;
			if (row["publisher"]!=DBNull.Value) model.publisher = row["publisher"] as string;
			if (row["uri"]!=DBNull.Value) model.uri = row["uri"] as string;
			if (row["thumb"]!=DBNull.Value) model.thumb = row["thumb"] as string;
			if (row["note"]!=DBNull.Value) model.note = row["note"] as string;
			return model;
		}

		#endregion
	
	}

	
}

